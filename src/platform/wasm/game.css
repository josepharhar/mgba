mgba-game {
  display: block;
  --controls-scale: min(75px, 15vh);
}

#canvas {
  image-rendering: crisp-edges; /* TODO make this configurable */
  width: 100vw;
  height: 100vh;
  object-fit: contain;
  display: block;
  position: absolute;
  background-color: black;
}
#canvas.disabled {
  display: none;
}


mgba-game .placeholder {
  display: flex;
  justify-content: space-between;
  align-items: center;
}


mgba-game .button-container {
  position: fixed;
  bottom: 0;
  /* TODO what does left and right 0 do? */
  left: 0;
  right: 0;

  display: grid;
  grid-template-rows: 1fr auto auto auto;
  min-height: 100vh;

  z-index: 5;
  opacity: 0.7;
  user-select: none;
  font-family: sans-serif;

  /*max-width: 400px;
  width: 100vw;
  margin: auto;
  margin-bottom: 26px;
  user-select: none;*/
}

mgba-game .button {
  background-color: white;
  color: black;
  border-radius: calc(0.2*var(--controls-scale));
}

mgba-game .shoulder-row {
  display: flex;
  justify-content: space-between;
}
mgba-game .L,
mgba-game .R {
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 30px;

  width: calc(2*var(--controls-scale));
  height: calc(1*var(--controls-scale));
}
mgba-game .L::before {
  content: 'L';
}
mgba-game .R::before {
  content: 'R';
}

mgba-game .controls-row {
  display: flex;
  justify-content: space-between;
}
mgba-game .dpad {
  /* this needs to be kept in sync with ab-container's width and height! */
  height: calc(3*var(--controls-scale));
  width: calc(3*var(--controls-scale));
  display: grid;
  grid-template-columns: auto auto auto;
}
mgba-game .dpad > div {
  width: 100%;
  height: 100%;
  border: 1px solid green;
}
mgba-game .dpad > div::before {
  content: 'â¬†';
}
mgba-game .ab-container {
  display: grid;
  grid-template-columns: auto auto;
  height: calc(3*var(--controls-scale));
  width: calc(3*var(--controls-scale));
}
mgba-game .ab-container > div {
  width: 100%;
  height: 100%;

  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 30px;
}
mgba-game .A::before {
  content: 'A';
}
mgba-game .B::before {
  content: 'B';
}

mgba-game .menu-row {
  /*display: flex;
  justify-content: space-between;*/
  display: grid;
  grid-template-columns: 1fr auto 1fr;
}
mgba-game .menu::before {
  content: 'MENU';
}
mgba-game .menu {
  display: flex;
  justify-content: center;
  align-items: center;
}
mgba-game .select-start-container {
  display: flex;
}
mgba-game .select,
mgba-game .start {
  display: flex;
  justify-content: center;
  align-items: center;
}
mgba-game .select,
mgba-game .start,
mgba-game .menu {
  width: calc(2*var(--controls-scale));
  height: calc(var(--controls-scale));
}
mgba-game .select::before {
  content: 'SELECT';
}
mgba-game .start::before {
  content: 'START';
}


/* TODO implement pressed state for dpad */
mgba-game .d-pad {
  position: absolute;
  padding: 26px;
  top: 0;
  left: 0%;
  --size: 60px;
  --thickness: 15px;
  --rotate: 5deg;
  --rotateX: 0deg;
  --rotateY: 0deg;
  width: var(--size);
  height: var(--size);
  filter: drop-shadow(0 0 2px #666);
}

mgba-game .d-pad::before {
  content: '';
  position: absolute;
  top: calc(26px + var(--size) / 2 - var(--thickness) / 2);
  left: 26px;
  width: var(--size);
  height: var(--thickness);
  border-radius: 4px;
  background: #999;
}
mgba-game .d-pad::after {
  content: '';
  position: absolute;
  top: 26px;
  left: calc(26px + var(--size) / 2 - var(--thickness) / 2);
  width: var(--thickness);
  height: var(--size);
  background: #999;
  border-radius: 4px;
}

mgba-game .d-pad.Left:not(.Right)::before {
  background: linear-gradient(to left, #999 60%, #666);
}
mgba-game .d-pad.Right:not(.Left)::before {
  background: linear-gradient(to right, #999 60%, #666);
}
mgba-game .d-pad.Up:not(.Down)::after {
  background: linear-gradient(to top, #999 60%, #666);
}
mgba-game .d-pad.Down:not(.Up)::after {
  background: linear-gradient(to bottom, #999 60%, #666);
}

mgba-game .d-pad.Left:not(.Right) {
  --rotateY: calc(0deg - var(--rotate));
}
mgba-game .d-pad.Right:not(.Left) {
  --rotateY: var(--rotate);
}
mgba-game .d-pad.Up:not(.Down) {
  --rotateX: var(--rotate);
}
mgba-game .d-pad.Down:not(.Up) {
  --rotateX: calc(0deg - var(--rotate));
}
mgba-game .d-pad {
  transform: perspective(80px) rotateX(var(--rotateX)) rotateY(var(--rotateY));
}
